---
version: '3'
services:
  newsblur_container:
    build: 
      context: ./
      dockerfile: ./docker/Dockerfile
    
    links:
      - mongo
      - postgres
      - elasticsearch
      - redis
    restart: always
    networks:
      - nginx_network
      - postgres_network
      - redis_network
      - mongo_network
      - elasticsearch_network
    depends_on:
      - mongo
      - postgres
      - redis
      - elasticsearch
    ulimits:
      nproc: 10000
      nofile:
        soft: 10000
        hard: 10000
  nginx:
    image: nginx:1.13
    ports:
      - 80:80
    depends_on:
    - newsblur_container
    networks:
    - nginx_network
    volumes:
    - ./docker/nginx:/etc/nginx/conf.d
    - .:/opt/newsblur

  postgres:
    image: postgres:9
    environment:
      - POSTGRES_USER=newsblur
      - POSTGRES_PASSWORD=newsblur
    ports:
      - '5432:5432'
    volumes:
      - ./docker/postgres:/docker-entrypoint-initdb.d
      - ./docker/volumes/postgres:/var/lib/postgresql/data
    networks:
      - postgres_network

  redis:
    image: redis:3
    ports:
      - '6379:6379'
    volumes:
      - ./docker/volumes/redis:/data
      - ./config/redis.conf:/usr/local/etc/redis_server.conf
      - ./config/redis_docker.conf:/etc/redis_server.conf
      - ./docker/volumes/redis.var.lib:/var/lib/redis
    command: /usr/local/bin/redis-server /usr/local/etc/redis_server.conf
    networks:
      - redis_network


  elasticsearch:
    image: elasticsearch:1.7
    ports:
      - '9200:9200'
    volumes:
      - ./docker/volumes/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - elasticsearch_network

  mongo:
    image: mongo:3.2
    ports:
      - '27017:27017'
    command: mongod --smallfiles
    volumes:
      - ./docker/volumes/mongo:/data/db
    networks:
      - mongo_network
  
  db_pages:
    build:
      context: .
      dockerfile: docker/node/original_page/Dockerfile
    container_name: node_original_page
    restart: unless-stopped
    ports:
      - 3060:3060
  db_text:
    build:
      context: .
      dockerfile: docker/node/original_text/Dockerfile
    container_name: node_original_text
    restart: unless-stopped
    ports:
      - 3000:3000
  
  #haproxy:
  #  build:
  #    context: .
  #    dockerfile: docker/haproxy/Dockerfile
  #  image: haproxy:1.8.22
  #  ports:
  #    - 5000:5000

networks:
  nginx_network:
    driver: bridge
  postgres_network:
    driver: bridge
  redis_network:
    driver: bridge
  mongo_network:
    driver: bridge
  elasticsearch_network:
    driver: bridge
  haproxy_network:
    driver: overlay
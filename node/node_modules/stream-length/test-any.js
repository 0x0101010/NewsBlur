// Generated by CoffeeScript 1.8.0
(function() {
  var Promise, failurePromise, failureSyncPromise, failureSyncPromiseTwo, successPromise, successSyncPromise;

  Promise = require("bluebird");

  successPromise = function(val) {
    return new Promise(function(resolve, reject) {
      return process.nextTick(function() {
        return resolve(val);
      });
    });
  };

  failurePromise = function(val) {
    return new Promise(function(resolve, reject) {
      return process.nextTick(function() {
        return reject(val);
      });
    });
  };

  successSyncPromise = function(val) {
    return new Promise(function(resolve, reject) {
      return resolve(val);
    });
  };

  failureSyncPromise = function(val) {
    return new Promise(function(resolve, reject) {
      return reject(val);
    });
  };

  failureSyncPromiseTwo = function(val) {
    return Promise.reject(val);
  };

  Promise.any([
    successSyncPromise(), successPromise(), failureSyncPromise("fail a")["catch"](function(err) {
      return console.log(err);
    })
  ]).then(function() {
    return console.log("success a");
  });

  Promise.any([
    successSyncPromise(), successPromise(), failurePromise("fail b")["catch"](function(err) {
      return console.log(err);
    })
  ]).then(function() {
    return console.log("success b");
  });

  Promise.any([
    successPromise(), successPromise(), failurePromise("fail c")["catch"](function(err) {
      return console.log(err);
    })
  ]).then(function() {
    return console.log("success c");
  });

  Promise.any([
    successSyncPromise(), successSyncPromise(), failureSyncPromise("fail d")["catch"](function(err) {
      return console.log(err);
    })
  ]).then(function() {
    return console.log("success d");
  });

  Promise.any([
    successSyncPromise(), successSyncPromise(), failureSyncPromiseTwo("fail e")["catch"](function(err) {
      return console.log(err);
    })
  ]).then(function() {
    return console.log("success e");
  });

}).call(this);
